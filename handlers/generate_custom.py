from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, StateFilter, or_f
from config_data.config import Config, load_config
import qrcode
from PIL import Image
import os
import logging

router = Router()
config: Config = load_config()

class LinkQr(StatesGroup):
    link_qr = State()


DOWNLOADS_FOLDER = 'QR'

async def download_photo(message: Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_info = message.photo[-1]
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        photo_file = await bot.get_file(photo_info.file_id)
        # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        photo_url = f'https://api.telegram.org/file/bot{config.tg_bot.token}/{photo_file.file_path}'
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(DOWNLOADS_FOLDER):
            os.makedirs(DOWNLOADS_FOLDER)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
        photo_path = os.path.join(DOWNLOADS_FOLDER, f'{message.from_user.id}.jpg')
        await photo_file.download(photo_path)
        # –î–∞–ª–µ–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {photo_path}')



@router.message(F.text == '/QR')
async def all_message(message: Message, state: FSMContext) -> None:
    logging.info(f'all_message {message.chat.id} / {message.text}')
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–µ–º—É –¥–ª—è —Å—Å—ã–ª–∫–∏')
    await state.set_state(LinkQr.link_qr)


@router.message(F.photo, StateFilter(LinkQr.link_qr))
async def all_message(message: Message, state: FSMContext, bot: Bot) -> None:
    # üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    data = message.text

    # üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    qr = qrcode.QRCode(
        version=5,  # –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞ (1-40, —á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ø–ª–æ—Ç–Ω–µ–µ)
        error_correction=qrcode.constants.ERROR_CORRECT_H,  # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º
        box_size=10,  # –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        border=4,  # –†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–∏—Ü—ã
    )
    qr.add_data(data)
    qr.make(fit=True)

    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞
    qr_img = qr.make_image(fill="black", back_color="white").convert("RGB")

    # üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    await download_photo(message=message, bot=bot)
    logo_path = f"{message.from_user.id}.png"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–æ—Ç–∏–ø
    try:
        logo = Image.open(logo_path)

        # –ü—Ä–∏–≤–æ–¥–∏–º –ª–æ–≥–æ—Ç–∏–ø –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        logo_size = (qr_img.size[0] // 4, qr_img.size[1] // 4)
        logo = logo.resize(logo_size)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Ü–µ–Ω—Ç—Ä QR-–∫–æ–¥–∞
        pos = ((qr_img.size[0] - logo.size[0]) // 2, (qr_img.size[1] - logo.size[1]) // 2)
        qr_img.paste(logo, pos)

    except FileNotFoundError:
        await message.answer("‚ö† –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –±–µ–∑ –Ω–µ–≥–æ.")

    # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    output_file = "qr_code.png"
    qr_img.save(output_file)
    await message.answer_photo(photo=qr_img)