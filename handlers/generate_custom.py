from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from config_data.config import Config, load_config
import os
import logging

from qr_creator import start_create_qr

router = Router()
config: Config = load_config()

class LinkQr(StatesGroup):
    link_qr = State()


DOWNLOADS_FOLDER = 'QR'

async def download_photo(message: Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_info = message.photo[-1]
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        photo_file = await bot.get_file(photo_info.file_id)
        # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        photo_url = f'https://api.telegram.org/file/bot{config.tg_bot.token}/{photo_file.file_path}'
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(DOWNLOADS_FOLDER):
            os.makedirs(DOWNLOADS_FOLDER)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
        photo_path = os.path.join(DOWNLOADS_FOLDER, f'{message.from_user.id}.png')
        await bot.download_file(photo_file.file_path, photo_path)
        # –î–∞–ª–µ–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {photo_path}')


@router.message(F.text == '/QR')
async def all_message(message: Message, state: FSMContext) -> None:
    logging.info(f'all_message {message.chat.id} / {message.text}')
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø , —Å—Å—ã–ª–∫—É –∏ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–¥ qr —á–µ—Ä–µ–∑ _')
    await message.answer("–ü—Ä–∏–º–µ—Ä: https://example.com_Scan Me!")
    await message.answer_photo(photo="example.png")
    await state.set_state(LinkQr.link_qr)


@router.message(F.photo, StateFilter(LinkQr.link_qr))
async def all_message(message: Message, state: FSMContext, bot: Bot) -> None:
    # üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    data = message.caption
    if not "_" in data:
        data = f"{data}_{data}"
    data = data.split("_")
    await download_photo(message=message, bot=bot)
    logo_path = f"QR/{message.from_user.id}.png"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–æ—Ç–∏–ø
    photo = await start_create_qr(url=data[0], text=data[1], tg_id=message.from_user.id, logo_path=logo_path)
    await message.answer_photo(photo=photo)
