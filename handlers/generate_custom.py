from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, StateFilter, or_f
from config_data.config import Config, load_config
import qrcode
from PIL import Image
import logging

router = Router()
config: Config = load_config()

class LinkQr(StatesGroup):
    link_qr = State()


@router.message(F.text == '/QR')
async def all_message(message: Message, state: FSMContext) -> None:
    logging.info(f'all_message {message.chat.id} / {message.text}')
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–µ–º—É –¥–ª—è —Å—Å—ã–ª–∫–∏')
    await state.set_state(LinkQr.link_qr)


@router.message(F.photo, StateFilter(LinkQr.link_qr))
async def all_message(message: Message, state: FSMContext) -> None:
    # üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    data = message.text

    # üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    qr = qrcode.QRCode(
        version=5,  # –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞ (1-40, —á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ø–ª–æ—Ç–Ω–µ–µ)
        error_correction=qrcode.constants.ERROR_CORRECT_H,  # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º
        box_size=10,  # –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        border=4,  # –†–∞–∑–º–µ—Ä –≥—Ä–∞–Ω–∏—Ü—ã
    )
    qr.add_data(data)
    qr.make(fit=True)

    # üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞
    qr_img = qr.make_image(fill="black", back_color="white").convert("RGB")

    # üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    logo_path = "logo.png"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–æ—Ç–∏–ø
    try:
        logo = Image.open(logo_path)

        # –ü—Ä–∏–≤–æ–¥–∏–º –ª–æ–≥–æ—Ç–∏–ø –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        logo_size = (qr_img.size[0] // 4, qr_img.size[1] // 4)
        logo = logo.resize(logo_size)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Ü–µ–Ω—Ç—Ä QR-–∫–æ–¥–∞
        pos = ((qr_img.size[0] - logo.size[0]) // 2, (qr_img.size[1] - logo.size[1]) // 2)
        qr_img.paste(logo, pos)

    except FileNotFoundError:
        await message.answer("‚ö† –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –±–µ–∑ –Ω–µ–≥–æ.")

    # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    output_file = "qr_code.png"
    qr_img.save(output_file)
    await message.answer_photo(photo=qr_img)